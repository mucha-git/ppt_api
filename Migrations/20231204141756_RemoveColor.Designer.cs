// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApi.Helpers;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231204141756_RemoveColor")]
    partial class RemoveColor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApi.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(80)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(80)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PilgrimageId")
                        .HasColumnType("integer");

                    b.Property<string>("Random")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PilgrimageId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WebApi.Entities.Coordinates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("WebApi.Entities.Elements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Autoplay")
                        .HasColumnType("boolean");

                    b.Property<int?>("DestinationViewId")
                        .HasColumnType("integer");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("MapHeight")
                        .HasColumnType("integer");

                    b.Property<int?>("MapId")
                        .HasColumnType("integer");

                    b.Property<int?>("Margin")
                        .HasColumnType("integer");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Playlist")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Values")
                        .HasColumnType("text");

                    b.Property<int>("ViewId")
                        .HasColumnType("integer");

                    b.Property<int>("YearId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("ViewId");

                    b.HasIndex("YearId");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("WebApi.Entities.MapPins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("IconSrc")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PinSrc")
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.Property<int>("YearId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("MapPins");
                });

            modelBuilder.Entity("WebApi.Entities.Maps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Delta")
                        .HasColumnType("double precision");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MapSrc")
                        .HasColumnType("text");

                    b.Property<string>("MarkersString")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Polylines")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StrokeColor")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StrokeWidth")
                        .HasColumnType("integer");

                    b.Property<int>("YearId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("WebApi.Entities.Markers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("FooterColor")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FooterText")
                        .HasColumnType("varchar(100)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("PinId")
                        .HasColumnType("integer");

                    b.Property<int>("StrokeWidth")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("WebApi.Entities.Pilgrimages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LogoSrc")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("OneSignal")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OneSignalApiKey")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Pilgrimages");
                });

            modelBuilder.Entity("WebApi.Entities.Views", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("HeaderText")
                        .HasColumnType("varchar(80)");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("ScreenType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(80)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("ViewId")
                        .HasColumnType("integer");

                    b.Property<int>("YearId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ViewId");

                    b.HasIndex("YearId");

                    b.ToTable("Views");
                });

            modelBuilder.Entity("WebApi.Entities.Years", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImgSrc")
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("PilgrimageId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Version")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.Property<string>("YearTopic")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PilgrimageId");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("WebApi.Entities.Account", b =>
                {
                    b.HasOne("WebApi.Entities.Pilgrimages", "Pilgrimage")
                        .WithMany("Accounts")
                        .HasForeignKey("PilgrimageId");

                    b.OwnsMany("WebApi.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("AccountId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("varchar(80)");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("ReasonRevoked")
                                .HasColumnType("varchar(80)");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("varchar(1000)");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("varchar(80)");

                            b1.Property<string>("Token")
                                .HasColumnType("varchar(1000)");

                            b1.HasKey("Id");

                            b1.HasIndex("AccountId");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner("Account")
                                .HasForeignKey("AccountId");

                            b1.Navigation("Account");
                        });

                    b.Navigation("Pilgrimage");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("WebApi.Entities.Elements", b =>
                {
                    b.HasOne("WebApi.Entities.Maps", "Map")
                        .WithMany()
                        .HasForeignKey("MapId");

                    b.HasOne("WebApi.Entities.Views", "View")
                        .WithMany()
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Years", "Year")
                        .WithMany("Elements")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("View");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("WebApi.Entities.MapPins", b =>
                {
                    b.HasOne("WebApi.Entities.Years", "Year")
                        .WithMany("MapPins")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("WebApi.Entities.Maps", b =>
                {
                    b.HasOne("WebApi.Entities.Years", "Year")
                        .WithMany("Maps")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("WebApi.Entities.Views", b =>
                {
                    b.HasOne("WebApi.Entities.Views", "View")
                        .WithMany("ViewsList")
                        .HasForeignKey("ViewId");

                    b.HasOne("WebApi.Entities.Years", "Year")
                        .WithMany("Views")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("View");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("WebApi.Entities.Years", b =>
                {
                    b.HasOne("WebApi.Entities.Pilgrimages", "Pilgrimage")
                        .WithMany("Years")
                        .HasForeignKey("PilgrimageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pilgrimage");
                });

            modelBuilder.Entity("WebApi.Entities.Pilgrimages", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Years");
                });

            modelBuilder.Entity("WebApi.Entities.Views", b =>
                {
                    b.Navigation("ViewsList");
                });

            modelBuilder.Entity("WebApi.Entities.Years", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("MapPins");

                    b.Navigation("Maps");

                    b.Navigation("Views");
                });
#pragma warning restore 612, 618
        }
    }
}
